syntax = "proto2";
package hw.trezor.messages.beam;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageBeam";

/**
 * Structure representing beam CoinID (id, type, subIdx, amount, assetID) structure
 * @embed
 */
message BeamCoinID {
    optional uint64 idx = 1;
    optional uint32 type = 2;
    optional uint32 sub_idx = 3;
    optional uint64 amount = 4;
    optional uint32 asset_id = 5;
}

/**
 * Structure representing ECC point
 * @embed
 * @end
 */
message BeamECCPoint {
    optional bytes x = 1; // Image of ECC point (only x)
    optional bool y = 2; // y part
}

/**
 * Structure representing BeamSignature
 * @embed
 * @end
 */
message BeamSignature {
    optional BeamECCPoint nonce_pub = 1; // Public nonce of the signature
    optional bytes sign_k = 2;           // k part of the signature
}

/**
 * Request: generate rangeproof for the given CoinID
 * @next BeamRangeproofData
 * @next Failure
 */
message BeamGenerateRangeproof {
    optional BeamCoinID cid = 1;  // CoinID to generate rangeproof from
    optional BeamECCPoint pt0 = 2; // point0 for rangeproof
    optional BeamECCPoint pt1 = 3; // point1 for rangeproof
    optional bytes extra_sk0 = 4; // optional extra scalar0
    optional bytes extra_sk1 = 5; // optional extra scalar1
}


/**
 * Response: Contains rangeproof data structure for the given kidv
 * @end
 */
message BeamRangeproofData {
    optional bytes data_taux = 1; // rangeproof data (TauX)
    optional bool is_successful = 2; // is rangeproof calculate process was successful
    optional BeamECCPoint pt0 = 3; // point0 of rangeproof data
    optional BeamECCPoint pt1 = 4; // point1 of rangeproof data
}

/**
 * Request: Ask device for the PKdf
 * @start
 * @next BeamPKdf
 * @next Failure
 */
message BeamGetPKdf {
    optional bool is_root_key = 1; // whether the requested PKdf should be derived from root (owner key).}
    optional uint32 child_idx = 2; // Child index. If is_root_key==true, this parameter (child_idx) is ignored.
    optional bool show_display = 3; // optionally show on display before sending the result
}

/**
 * Response: Contains PKdf key from device
 * @end
 */
message BeamPKdf {
    optional bytes key = 1; // public key
    optional BeamECCPoint cofactor_G = 2; // cofactor G
    optional BeamECCPoint cofactor_J = 3; // cofactor J
}

/**
 * Request: Ask device for the number of slots
 * @start
 * @next BeamNumSlots
 * @next Failure - if device is not initialized
 */
message BeamGetNumSlots {
    optional bool show_display = 1; // optionally show on display before sending the result
}

/**
 * Response: number of nonce slots available on the device
 * @end
 */
message BeamNumSlots {
    optional uint32 num_slots = 1; // number of nonce slots available on the device
}

/**
 * Structure representing Beam common transaction data
 * @embed
 * @end
 */
message BeamTxCommon {
    repeated BeamCoinID inputs = 1; // KIDV inputs
    optional bytes offset_sk = 2; // Randomly generated offset (scalar)
    repeated BeamCoinID outputs = 3; // KIDV outputs
    optional BeamKernelParameters kernel_params = 4; // kernel parameters for challenge

    message BeamKernelParameters {
        optional uint64 fee = 1;
        optional uint64 min_height = 2;
        optional uint64 max_height = 3;
        optional BeamECCPoint commitment = 4;
        optional BeamSignature signature = 5;
    }
}

/**
 * Structure representing Beam mutual transaction data
 * @embed
 * @end
 */
message BeamTxMutualInfo {
    optional bytes peer = 1; // Peer ID
    optional uint64 wallet_identity_key = 2; // Wallet identity ID Key
    optional BeamSignature payment_proof_signature = 3; // payment proof signature
}

/**
 * Request: sign transaction (send part). Performed 2 times.
 * @next BeamSignedTransactionSendResult
 * @next Failure
 */
message BeamSignTransactionSend {
    optional BeamTxCommon tx_common = 1; // Common transaction data
    optional BeamTxMutualInfo tx_mutual_info = 2; // Mutual transaction data
    optional uint32 nonce_slot = 3; // nonce slot which should be used
    optional bytes user_agreement = 4; // user agreement data. Set to Zero on 1st invocation
}

/**
 * Response: signed transaction (send part)
 * @end
 */
message BeamSignTransactionSendResult {
    optional BeamSignTransactionSend tx = 1; // TODO
}

/**
 * Request: sign transaction (receive part)
 * @next BeamSignedTransactionReceiveResult
 * @next Failure
 */
message BeamSignTransactionReceive {
    optional BeamTxCommon tx_common = 1; // Common transaction data
    optional BeamTxMutualInfo tx_mutual_info = 2; // Mutual transaction data
}

/**
 * Response: signed transaction (receive part)
 * @end
 */
message BeamSignTransactionReceiveResult {
    optional BeamSignTransactionReceive tx = 1; // TODO
}

/**
 * Request: sign transaction (split part - self send)
 * @next BeamSignedTransactionSplitResult
 * @next Failure
 */
message BeamSignTransactionSplit {
    optional BeamTxCommon tx_common = 1; // Common transaction data
}

/**
 * Response: signed transaction (split part)
 * @end
 */
message BeamSignTransactionSplitResult {
    optional BeamSignTransactionSplit tx = 1; // TODO
}
